// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/niluwats/invoice-marketplace/internal/domain"
	errors "github.com/niluwats/invoice-marketplace/pkg/errors"

	mock "github.com/stretchr/testify/mock"
)

// IssuerRepository is an autogenerated mock type for the IssuerRepository type
type IssuerRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx
func (_m *IssuerRepository) FindAll(ctx *context.Context) ([]domain.Issuer, *errors.AppError) {
	ret := _m.Called(ctx)

	var r0 []domain.Issuer
	var r1 *errors.AppError
	if rf, ok := ret.Get(0).(func(*context.Context) ([]domain.Issuer, *errors.AppError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*context.Context) []domain.Issuer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Issuer)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context) *errors.AppError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *IssuerRepository) FindById(ctx *context.Context, id int) (*domain.Issuer, *errors.AppError) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Issuer
	var r1 *errors.AppError
	if rf, ok := ret.Get(0).(func(*context.Context, int) (*domain.Issuer, *errors.AppError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) *domain.Issuer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Issuer)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) *errors.AppError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// NewIssuerRepository creates a new instance of IssuerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIssuerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IssuerRepository {
	mock := &IssuerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
