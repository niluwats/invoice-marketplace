// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/niluwats/invoice-marketplace/internal/domain"
	errors "github.com/niluwats/invoice-marketplace/pkg/errors"

	mock "github.com/stretchr/testify/mock"
)

// BidRepository is an autogenerated mock type for the BidRepository type
type BidRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx, invoiceId
func (_m *BidRepository) GetAll(ctx *context.Context, invoiceId int) ([]domain.Bid, *errors.AppError) {
	ret := _m.Called(ctx, invoiceId)

	var r0 []domain.Bid
	var r1 *errors.AppError
	if rf, ok := ret.Get(0).(func(*context.Context, int) ([]domain.Bid, *errors.AppError)); ok {
		return rf(ctx, invoiceId)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) []domain.Bid); ok {
		r0 = rf(ctx, invoiceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Bid)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) *errors.AppError); ok {
		r1 = rf(ctx, invoiceId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// GetBid provides a mock function with given fields: ctx, id
func (_m *BidRepository) GetBid(ctx *context.Context, id int) (*domain.Bid, *errors.AppError) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Bid
	var r1 *errors.AppError
	if rf, ok := ret.Get(0).(func(*context.Context, int) (*domain.Bid, *errors.AppError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, int) *domain.Bid); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bid)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, int) *errors.AppError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// ProcessApproveBid provides a mock function with given fields: ctx, invoiceid, issuerid, amount
func (_m *BidRepository) ProcessApproveBid(ctx *context.Context, invoiceid int, issuerid int, amount float64) *errors.AppError {
	ret := _m.Called(ctx, invoiceid, issuerid, amount)

	var r0 *errors.AppError
	if rf, ok := ret.Get(0).(func(*context.Context, int, int, float64) *errors.AppError); ok {
		r0 = rf(ctx, invoiceid, issuerid, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.AppError)
		}
	}

	return r0
}

// ProcessBid provides a mock function with given fields: ctx, bid, restBalance
func (_m *BidRepository) ProcessBid(ctx *context.Context, bid domain.Bid, restBalance float64) (*domain.Bid, *errors.AppError) {
	ret := _m.Called(ctx, bid, restBalance)

	var r0 *domain.Bid
	var r1 *errors.AppError
	if rf, ok := ret.Get(0).(func(*context.Context, domain.Bid, float64) (*domain.Bid, *errors.AppError)); ok {
		return rf(ctx, bid, restBalance)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, domain.Bid, float64) *domain.Bid); ok {
		r0 = rf(ctx, bid, restBalance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bid)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, domain.Bid, float64) *errors.AppError); ok {
		r1 = rf(ctx, bid, restBalance)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// ProcessCancelBid provides a mock function with given fields: ctx, invoiceid
func (_m *BidRepository) ProcessCancelBid(ctx *context.Context, invoiceid int) *errors.AppError {
	ret := _m.Called(ctx, invoiceid)

	var r0 *errors.AppError
	if rf, ok := ret.Get(0).(func(*context.Context, int) *errors.AppError); ok {
		r0 = rf(ctx, invoiceid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.AppError)
		}
	}

	return r0
}

// NewBidRepository creates a new instance of BidRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBidRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BidRepository {
	mock := &BidRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
